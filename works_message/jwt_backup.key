
    let iat = Math.floor(now.getTime() / 1000);
    
    now.setMinutes(now.getMinutes() + 10);

    let exp = Math.floor(now.getTime() / 1000);

    let token_header = {
        'alg' : 'RS256',
        'typ' : 'JWT'
    };

       
    let token_payload = {
        'iss' : client_id,                                              //클라이언트 ID
        'sub' : service_id,                                             //서비스계정명
        'iat' : iat,                                                    //create time
        'exp' : exp                                                     //expired time
    };

    let header64 = Buffer.from(JSON.stringify(token_header), 'utf-8').toString('base64');
    let payload64 = Buffer.from(JSON.stringify(token_payload), 'utf-8').toString('base64').replace('=', '');

    // console.log(header64);
    // console.log(payload64);

    let upper = header64 + '.' + payload64;

    console.log('upper => ' + upper);

    private_key = fs.readFileSync('./works_message/private_copy.key', 'utf8');

    let signature = crypto.createHmac('sha256', private_key).update(upper).digest('base64').replace('=','');

    let jwt = upper + '.' + Buffer.from(signature, 'utf-8').toString('base64');
    
    let jwt2 = jsonwebtoken.sign(token_payload, private_key)

    console.log('jwt : ' + jwt);
    console.log('jwt2 : ' + jwt2);


    params.assertion        = jwt2;
    params.grant_type       = 'urn:ietf:params:oauth:grant-type:jwt-bearer';
    params.client_id        = client_id;
    params.client_secret    = cliend_secret_id;
    params.scope            = 'bot';

    axios({
        method          : 'post',                                      
        url             : token_call_url,             
        headers         : {'content-Type' : 'application/x-www-form-urlencoded; charset=UTF-8'},
        data            : params          
    }).then((res) =>{
        //console.log(res.data);
    })



access_token: 'kr1AAAAyHaC7ACS9NOdzcraawXzfFMhq3aHmCms9CclfkNFra/80mURBR1cRnYeCD/qflT4HlTurKtd+gHe98J8beiQncBNy1eFTcfeVHuVHM05JBpYouw41ObBmaa9fMMCkJ7B/1cAMdLyQCnthcZCU8mrv27CRiOipol8gSMSHjiSw5fU75fpmfh2CC2sfjjwTVNhZ8cFJ232FA+LzKAm0yyCA3ryuhXXcW6/KkkGTtQYlOKMnutycW96DWmOY4h3uWg5iol1iYdTHqb7Ve65lj+Yl9A=.kwiu9yNovfcs8Rumz2QSOg',
refresh_token: 'kr1AAAAg3Pd63ThvoJlWLPVmEjPGuYrOx40wxWU1o+6Xq0aQoFjQBbQV7oGm3aP9VQbhRc6aGu9lvOw1FIN0tpljMH38wRaE7n315VngEYJU3RbqSbCB3i2oEFeKwTKY1Xd9EukZ8xo6wVbSWzGRyAHD/JIWub3nuIYhR4hqpH2C/8q5zXfyb1agTIkt2IQ7mxnW4ugqA==.kwiu9yNovfcs8Rumz2QSOg',
scope: 'bot',
token_type: 'Bearer',
expires_in: '86400'




    